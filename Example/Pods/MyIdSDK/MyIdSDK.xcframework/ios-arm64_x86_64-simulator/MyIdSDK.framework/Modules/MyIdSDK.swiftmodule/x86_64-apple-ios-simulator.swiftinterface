// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MyIdSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreImage.CIFilterBuiltins
import Combine
import CommonCrypto
import Compression
import CoreImage
import CoreVideo
import CryptoKit
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
@_exported import MyIdSDK
import Security
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class MyIdResult : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public var code: Swift.String?
  @objc public var comparisonValue: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String : Swift.Error {
}
@objc public enum MyIdDocumentType : Swift.Int {
  case ID_CARD = 0
  case PASSPORT
  case DRIVER_LICENSE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class MyIdViewModel : ObjectiveC.NSObject, Combine.ObservableObject {
  @objc public func startMyId(clientId: Swift.String, clientHash: Swift.String, clientHashId: Swift.String, passportData: Swift.String? = nil, dateOfBirth: Swift.String? = nil, minAge: Swift.Int = 16, sdkHash: Swift.String? = nil, externalId: Swift.String? = nil, threshold: Swift.Float = 0.5, buildMode: MyIdSDK.MyIdBuildMode = MyIdBuildMode.PRODUCTION, entryType: MyIdSDK.MyIdEntryType = MyIdEntryType.AUTH, residency: MyIdSDK.MyIdResidency = MyIdResidency.RESIDENT, locale: MyIdSDK.MyIdLocale = MyIdLocale.RU, cameraShape: MyIdSDK.MyIdCameraShape = MyIdCameraShape.CIRCLE, resolution: MyIdSDK.MyIdResolution = MyIdResolution.RESOLUTION_480, cameraSelector: MyIdSDK.MyIdCameraSelector = MyIdCameraSelector.FRONT, presentationStyle: MyIdSDK.MyIdPresentationStyle = MyIdPresentationStyle.FULL, organizationDetails: MyIdSDK.MyIdOrganizationDetails? = nil, appearance: MyIdSDK.MyIdAppearance? = nil, withPhoto: Swift.Bool = false)
  @objc override dynamic public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13.0, *)
@objc extension MyIdSDK.MyIdViewModel : MyIdSDK.MyIdClientDelegate {
  @objc dynamic public func onSuccess(result: MyIdSDK.MyIdResult)
  @objc dynamic public func onError(exception: MyIdSDK.MyIdException)
  @objc dynamic public func onUserExited()
}
@_inheritsConvenienceInitializers @objc public class MyIdClient : ObjectiveC.NSObject {
  @objc public class func start(withConfig config: MyIdSDK.MyIdConfig, withDelegate delegate: any MyIdSDK.MyIdClientDelegate)
  @objc public class func run(withConfig config: MyIdSDK.MyIdConfig, withDelegate delegate: any MyIdSDK.MyIdClientDelegate) -> UIKit.UIViewController
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MyIdBuildMode : Swift.Int {
  case DEBUG = 0
  case PRODUCTION
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MyIdResolution : Swift.Int {
  case RESOLUTION_480 = 0
  case RESOLUTION_720
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MyIdPresentationStyle : Swift.Int {
  case FULL = 0
  case SHEET
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MyIdAppearance : ObjectiveC.NSObject {
  @objc public var primaryColor: UIKit.UIColor?
  @objc public var errorColor: UIKit.UIColor?
  @objc public var primaryButtonColor: UIKit.UIColor?
  @objc public var primaryButtonColorDisabled: UIKit.UIColor?
  @objc public var primaryButtonTextColor: UIKit.UIColor?
  @objc public var primaryButtonTextColorDisabled: UIKit.UIColor?
  @objc public var buttonCornerRadius: Swift.Float
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MyIdEntryType : Swift.Int {
  case AUTH = 0
  case FACE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MyIdConfig : ObjectiveC.NSObject {
  @objc public var clientId: Swift.String?
  @objc public var clientHash: Swift.String?
  @objc public var clientHashId: Swift.String?
  @objc public var passportData: Swift.String?
  @objc public var dateOfBirth: Swift.String?
  @objc public var minAge: Swift.Int
  @objc public var sdkHash: Swift.String?
  @objc public var externalId: Swift.String?
  @objc public var threshold: Swift.Float
  @objc public var buildMode: MyIdSDK.MyIdBuildMode
  @objc public var entryType: MyIdSDK.MyIdEntryType
  @objc public var residency: MyIdSDK.MyIdResidency
  @objc public var locale: MyIdSDK.MyIdLocale
  @objc public var cameraShape: MyIdSDK.MyIdCameraShape
  @objc public var resolution: MyIdSDK.MyIdResolution
  @objc public var cameraSelector: MyIdSDK.MyIdCameraSelector
  @objc public var presentationStyle: MyIdSDK.MyIdPresentationStyle
  @objc public var organizationDetails: MyIdSDK.MyIdOrganizationDetails?
  @objc public var appearance: MyIdSDK.MyIdAppearance?
  @objc public var withPhoto: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MyIdClientDelegate {
  @objc func onSuccess(result: MyIdSDK.MyIdResult)
  @objc func onError(exception: MyIdSDK.MyIdException)
  @objc func onUserExited()
}
@_inheritsConvenienceInitializers @objc public class MyIdException : ObjectiveC.NSObject {
  @objc public var message: Swift.String?
  @objc public var code: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MyIdGenerator : ObjectiveC.NSObject {
  @objc public class func hash(payload: Swift.String, clientHash: Swift.String, clientHashId: Swift.String) -> Swift.String?
  @objc public class func device() -> Swift.String
  @objc public class func deviceModel() -> Swift.String?
  @objc public class func deviceName() -> Swift.String?
  @objc public class func systemName() -> Swift.String?
  @objc public class func systemVersion() -> Swift.String?
  @objc public class func isPhone() -> Swift.Bool
  @objc public class func isPad() -> Swift.Bool
  @objc public class func isSimulator() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MyIdCameraShape : Swift.Int {
  case ELLIPSE = 0
  case CIRCLE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MyIdCameraSelector : Swift.Int {
  case FRONT = 0
  case BACK
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MyIdResidency : Swift.Int {
  case USER_DEFINED = 0
  case RESIDENT
  case NON_RESIDENT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MyIdLocale : Swift.Int {
  case RU = 0
  case EN
  case UZ
  case KY
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MyIdOrganizationDetails : ObjectiveC.NSObject {
  @objc public var phoneNumber: Swift.String?
  @objc public var logo: UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
extension MyIdSDK.MyIdDocumentType : Swift.Equatable {}
extension MyIdSDK.MyIdDocumentType : Swift.Hashable {}
extension MyIdSDK.MyIdDocumentType : Swift.RawRepresentable {}
extension MyIdSDK.MyIdBuildMode : Swift.Equatable {}
extension MyIdSDK.MyIdBuildMode : Swift.Hashable {}
extension MyIdSDK.MyIdBuildMode : Swift.RawRepresentable {}
extension MyIdSDK.MyIdResolution : Swift.Equatable {}
extension MyIdSDK.MyIdResolution : Swift.Hashable {}
extension MyIdSDK.MyIdResolution : Swift.RawRepresentable {}
extension MyIdSDK.MyIdPresentationStyle : Swift.Equatable {}
extension MyIdSDK.MyIdPresentationStyle : Swift.Hashable {}
extension MyIdSDK.MyIdPresentationStyle : Swift.RawRepresentable {}
extension MyIdSDK.MyIdEntryType : Swift.Equatable {}
extension MyIdSDK.MyIdEntryType : Swift.Hashable {}
extension MyIdSDK.MyIdEntryType : Swift.RawRepresentable {}
extension MyIdSDK.MyIdCameraShape : Swift.Equatable {}
extension MyIdSDK.MyIdCameraShape : Swift.Hashable {}
extension MyIdSDK.MyIdCameraShape : Swift.RawRepresentable {}
extension MyIdSDK.MyIdCameraSelector : Swift.Equatable {}
extension MyIdSDK.MyIdCameraSelector : Swift.Hashable {}
extension MyIdSDK.MyIdCameraSelector : Swift.RawRepresentable {}
extension MyIdSDK.MyIdResidency : Swift.Equatable {}
extension MyIdSDK.MyIdResidency : Swift.Hashable {}
extension MyIdSDK.MyIdResidency : Swift.RawRepresentable {}
extension MyIdSDK.MyIdLocale : Swift.Equatable {}
extension MyIdSDK.MyIdLocale : Swift.Hashable {}
extension MyIdSDK.MyIdLocale : Swift.RawRepresentable {}
